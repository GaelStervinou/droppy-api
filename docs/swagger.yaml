basePath: /
definitions:
  account.TokenInfo:
    properties:
      expiry:
        type: integer
      jwtToken:
        type: string
      refreshToken:
        type: string
    type: object
  controllers.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    type: object
  custom_type.NullString:
    properties:
      string:
        type: string
      valid:
        description: Valid is true if String is not NULL
        type: boolean
    type: object
  errors2.MultiFieldsError:
    properties:
      fields:
        additionalProperties:
          type: string
        type: object
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  model.DropCreationParam:
    properties:
      content:
        type: string
      description:
        type: string
      lat:
        type: number
      lng:
        type: number
      picture:
        type: string
    type: object
  model.FollowCreationParam:
    properties:
      userId:
        type: integer
    type: object
  model.GroupCreationParam:
    properties:
      description:
        type: string
      isPrivate:
        type: boolean
      name:
        type: string
      picture:
        type: string
    type: object
  model.GroupMemberCreationParam:
    properties:
      groupId:
        type: integer
      role:
        type: string
    type: object
  model.GroupMemberPatchParam:
    properties:
      role:
        type: string
    type: object
  model.GroupPatchParam:
    properties:
      description:
        type: string
      isPrivate:
        type: boolean
      name:
        type: string
      picture:
        type: string
    type: object
  model.LoginParam:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  model.UserCreationParam:
    properties:
      email:
        type: string
      password:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
  model.UserPatchParam:
    properties:
      email:
        type: string
      username:
        type: string
    type: object
  postgres.Comment:
    properties:
      content:
        type: string
      createdAt:
        type: string
      createdBy:
        $ref: '#/definitions/postgres.User'
      createdById:
        type: integer
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      drop:
        $ref: '#/definitions/postgres.Drop'
      dropId:
        type: integer
      id:
        type: integer
      responses:
        items:
          $ref: '#/definitions/postgres.CommentResponse'
        type: array
      updatedAt:
        type: string
    type: object
  postgres.CommentResponse:
    properties:
      comment:
        $ref: '#/definitions/postgres.Comment'
      commentId:
        type: integer
      content:
        type: string
      createdAt:
        type: string
      createdBy:
        $ref: '#/definitions/postgres.User'
      createdById:
        type: integer
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      updatedAt:
        type: string
    type: object
  postgres.Drop:
    properties:
      comments:
        items:
          $ref: '#/definitions/postgres.Comment'
        type: array
      content:
        type: string
      createdAt:
        type: string
      createdBy:
        $ref: '#/definitions/postgres.User'
      createdById:
        type: integer
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      deletedById:
        type: integer
      description:
        type: string
      dropNotificationID:
        type: integer
      id:
        type: integer
      isPinned:
        type: boolean
      lat:
        type: number
      lng:
        type: number
      picturePath:
        type: string
      status:
        type: integer
      totalLikes:
        type: integer
      type:
        type: string
      updatedAt:
        type: string
    type: object
  postgres.Follow:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      followedID:
        type: integer
      followerID:
        type: integer
      id:
        type: integer
      status:
        type: integer
      updatedAt:
        type: string
    type: object
  postgres.Group:
    properties:
      createdAt:
        type: string
      createdBy:
        $ref: '#/definitions/postgres.User'
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      id:
        type: integer
      isPrivate:
        type: boolean
      name:
        type: string
      picturePath:
        $ref: '#/definitions/sql.NullString'
      status:
        type: integer
      updatedAt:
        type: string
    type: object
  postgres.User:
    properties:
      avatar:
        type: string
      bio:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      googleID:
        type: string
      groups:
        items:
          $ref: '#/definitions/postgres.Group'
        type: array
      id:
        type: integer
      isPrivate:
        type: boolean
      password:
        type: string
      phoneNumber:
        type: string
      role:
        type: string
      status:
        type: integer
      updatedAt:
        type: string
      username:
        type: string
      verifyToken:
        type: string
    type: object
  response_models.GetCommentResponse:
    properties:
      content:
        type: string
      createdAt:
        type: integer
      createdBy: {}
      drop:
        $ref: '#/definitions/response_models.GetDropResponse'
      id:
        type: integer
    type: object
  response_models.GetCommentResponseForDrop:
    properties:
      content:
        type: string
      createdAt:
        type: integer
      createdBy: {}
      id:
        type: integer
      responses:
        items:
          $ref: '#/definitions/response_models.GetCommentResponseResponse'
        type: array
    type: object
  response_models.GetCommentResponseResponse:
    properties:
      content:
        type: string
      createdAt:
        type: integer
      createdBy: {}
      id:
        type: integer
    type: object
  response_models.GetDropResponse:
    properties:
      comments:
        items:
          $ref: '#/definitions/response_models.GetCommentResponseForDrop'
        type: array
      content:
        type: string
      createdAt:
        type: string
      createdBy: {}
      description:
        type: string
      id:
        type: integer
      isCurrentUserLiking:
        type: boolean
      lat:
        type: number
      lng:
        type: number
      picturePath:
        type: string
      totalComments:
        type: integer
      totalLikes:
        type: integer
      type:
        type: string
    type: object
  response_models.GetGroupMemberResponse:
    properties:
      createdAt:
        type: string
      group:
        $ref: '#/definitions/response_models.GetGroupResponse'
      id:
        type: integer
      member: {}
      role:
        type: string
      status:
        type: integer
    type: object
  response_models.GetGroupResponse:
    properties:
      createdAt:
        type: string
      createdBy: {}
      description:
        type: string
      id:
        type: integer
      isPrivate:
        type: boolean
      name:
        type: string
      picturePath:
        $ref: '#/definitions/custom_type.NullString'
    type: object
  response_models.GetSearchGroupResponse:
    properties:
      createdAt:
        type: string
      createdBy: {}
      description:
        type: string
      id:
        type: integer
      isMember:
        type: boolean
      isPrivate:
        type: boolean
      name:
        type: string
      picturePath:
        $ref: '#/definitions/custom_type.NullString'
    type: object
  response_models.GetUserResponse:
    properties:
      avatar:
        type: string
      bio:
        type: string
      createdAt:
        type: string
      id:
        type: integer
      isPrivate:
        type: boolean
      username:
        type: string
    type: object
  sql.NullString:
    properties:
      string:
        type: string
      valid:
        description: Valid is true if String is not NULL
        type: boolean
    type: object
host: localhost:3000
info:
  contact:
    email: stervinou.g36@gmail.com
    name: Droppy API Support
  description: This is the API documentation for Droppy
  title: Droppy API
  version: "1.0"
paths:
  /admin/groups:
    get:
      consumes:
      - application/json
      description: Get all groups by admin user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response_models.GetGroupResponse'
            type: array
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get all groups
      tags:
      - user
  /admin/users:
    get:
      consumes:
      - application/json
      description: Get all users by admin user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response_models.GetUserResponse'
            type: array
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - user
  /auth:
    post:
      consumes:
      - application/json
      description: login with email and password
      parameters:
      - description: Login object
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/model.LoginParam'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/account.TokenInfo'
        "422":
          description: Invalid email or password
        "500":
          description: Internal Server Error
      summary: Login
      tags:
      - auth
  /auth/oauth_token:
    post:
      consumes:
      - application/json
      description: login with firebase id token
      parameters:
      - description: Firebase ID Token
        in: formData
        name: idToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/account.TokenInfo'
        "422":
          description: Unprocessable Entity
        "500":
          description: Internal Server Error
      summary: Login
      tags:
      - auth
  /auth/refresh:
    get:
      consumes:
      - application/json
      description: get a new jwt token from a refresh token
      parameters:
      - description: Refresh object
        in: body
        name: token
        required: true
        schema:
          $ref: '#/definitions/controllers.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/account.TokenInfo'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Refresh auth token
      tags:
      - auth
  /comments/{id}/responses:
    post:
      consumes:
      - application/json
      description: Respond to a comment
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: integer
      - description: Comment content
        in: body
        name: content
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response_models.GetCommentResponseResponse'
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/errors2.MultiFieldsError'
      security:
      - BearerAuth: []
      summary: Respond to a comment
      tags:
      - comment
  /comments/{id}/responses/{responseId}:
    delete:
      consumes:
      - application/json
      description: Delete a comment response
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: integer
      - description: Comment response ID
        in: path
        name: responseId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: ""
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/errors2.MultiFieldsError'
      security:
      - BearerAuth: []
      summary: Delete a comment response
      tags:
      - comment
  /drops:
    post:
      consumes:
      - application/json
      description: Create a new drop
      parameters:
      - description: Drop object
        in: body
        name: drop
        required: true
        schema:
          $ref: '#/definitions/model.DropCreationParam'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response_models.GetDropResponse'
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
      security:
      - BearerAuth: []
      summary: Create a new drop
      tags:
      - drop
  /drops/{id}/comments:
    post:
      consumes:
      - application/json
      description: Comment on a drop
      parameters:
      - description: Drop ID
        in: path
        name: id
        required: true
        type: integer
      - description: Comment content
        in: body
        name: content
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response_models.GetCommentResponse'
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/errors2.MultiFieldsError'
      security:
      - BearerAuth: []
      summary: Comment on a drop
      tags:
      - drop
  /drops/{id}/like:
    post:
      consumes:
      - application/json
      description: Like Drop
      parameters:
      - description: Drop ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response_models.GetDropResponse'
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/errors2.MultiFieldsError'
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Like Drop
      tags:
      - drop
  /drops/{id}/unlike:
    delete:
      consumes:
      - application/json
      description: Unlike Drop
      parameters:
      - description: Drop ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: "No"
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/errors2.MultiFieldsError'
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Unlike Drop
      tags:
      - drop
  /follows:
    post:
      consumes:
      - application/json
      description: Follow user by its ID
      parameters:
      - description: Follow creation object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.FollowCreationParam'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/postgres.Follow'
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Follow user
      tags:
      - follow
  /follows/accept/{id}:
    post:
      consumes:
      - application/json
      description: Accept request by its ID
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/postgres.User'
            type: array
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Accept request
      tags:
      - follow
  /follows/my-followers:
    get:
      consumes:
      - application/json
      description: Get all followers of the current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/postgres.User'
            type: array
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get my followers
      tags:
      - follow
  /follows/pending:
    get:
      consumes:
      - application/json
      description: Get all pending requests of the current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/postgres.User'
            type: array
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get my pending requests
      tags:
      - follow
  /follows/refuse/{id}:
    post:
      consumes:
      - application/json
      description: Refuse follow request by its ID
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/postgres.User'
            type: array
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Refuse follow request
      tags:
      - follow
  /group/{id}/{memberId}/accept:
    post:
      consumes:
      - application/json
      description: Accept Group Member Request
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response_models.GetGroupMemberResponse'
        "400":
          description: Bad Request
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/errors2.MultiFieldsError'
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Accept Group Member Request
      tags:
      - group
  /groups:
    post:
      consumes:
      - application/json
      description: Create group
      parameters:
      - description: Group creation object
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/model.GroupCreationParam'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response_models.GetGroupResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/errors2.MultiFieldsError'
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Create group
      tags:
      - group
  /groups/{id}:
    patch:
      consumes:
      - application/json
      description: Patch group
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Group patch object
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/model.GroupPatchParam'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response_models.GetGroupResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/errors2.MultiFieldsError'
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Patch group
      tags:
      - group
  /groups/members/{groupId}/{memberId}:
    delete:
      consumes:
      - application/json
      description: Delete Group Member
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/errors2.MultiFieldsError'
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Delete Group Member
      tags:
      - group
    patch:
      consumes:
      - application/json
      description: Patch Group Member
      parameters:
      - description: Group member patch object
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/model.GroupMemberPatchParam'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response_models.GetGroupMemberResponse'
        "400":
          description: Bad Request
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/errors2.MultiFieldsError'
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Patch Group Member
      tags:
      - group
  /groups/members/{id}/{memberId}/refuse/:
    post:
      consumes:
      - application/json
      description: Refuse Group Member Request
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: ""
        "400":
          description: Bad Request
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/errors2.MultiFieldsError'
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Refuse Group Member Request
      tags:
      - group
  /groups/members/{id}/join:
    post:
      consumes:
      - application/json
      description: Join Group
      parameters:
      - description: Join group creation object
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/model.GroupMemberCreationParam'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response_models.GetGroupMemberResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/errors2.MultiFieldsError'
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Join Group
      tags:
      - group
  /groups/members/{id}/pending:
    get:
      consumes:
      - application/json
      description: Get Pending Group Member Requests
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response_models.GetGroupMemberResponse'
            type: array
        "400":
          description: Bad Request
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/errors2.MultiFieldsError'
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get Pending Group Member Requests
      tags:
      - group
  /groups/search:
    get:
      consumes:
      - application/json
      description: Search groups
      parameters:
      - description: Search query
        in: query
        name: search
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response_models.GetSearchGroupResponse'
            type: array
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Search groups
      tags:
      - group
  /users:
    post:
      consumes:
      - application/json
      description: Create user
      parameters:
      - description: User creation object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.UserCreationParam'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/account.TokenInfo'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/errors2.MultiFieldsError'
        "500":
          description: Internal Server Error
      summary: Create user
      tags:
      - user
  /users/:id/drops:
    get:
      consumes:
      - application/json
      description: List drops by user ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response_models.GetDropResponse'
            type: array
        "500":
          description: Internal Server Error
      summary: List drops by user ID
      tags:
      - drop
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Get user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response_models.GetUserResponse'
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - user
    patch:
      consumes:
      - application/json
      description: Patch user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User creation object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.UserPatchParam'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/postgres.User'
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Patch user by ID
      tags:
      - user
  /users/my-feed:
    get:
      consumes:
      - application/json
      description: Get feed
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/postgres.Drop'
            type: array
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get feed
      tags:
      - drop
  /users/search:
    get:
      consumes:
      - application/json
      description: Search users
      parameters:
      - description: Search query
        in: query
        name: search
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response_models.GetUserResponse'
            type: array
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Search users
      tags:
      - user
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
