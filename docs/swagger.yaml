basePath: /
definitions:
  account.TokenInfo:
    properties:
      expiry:
        type: integer
      jwtToken:
        type: string
      refreshToken:
        type: string
    type: object
  controllers.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    type: object
  custom_type.NullString:
    properties:
      string:
        type: string
      valid:
        description: Valid is true if String is not NULL
        type: boolean
    type: object
  drop_type_apis.ApiSearchResponse:
    properties:
      content:
        type: string
      picturePath:
        type: string
      search:
        type: string
      subtitle:
        type: string
      title:
        type: string
    type: object
  errors2.MultiFieldsError:
    properties:
      fields:
        additionalProperties:
          type: string
        type: object
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  model.AdminUpdateUserRequest:
    properties:
      email:
        type: string
      role:
        type: string
      status:
        type: integer
      username:
        type: string
    required:
    - email
    - role
    - username
    type: object
  model.CommentCreationParam:
    properties:
      content:
        type: string
    type: object
  model.DropCreationParam:
    properties:
      content:
        type: string
      contentPicturePath:
        type: string
      contentSubtitle:
        type: string
      contentTitle:
        type: string
      description:
        type: string
      groups:
        items:
          type: integer
        type: array
      lat:
        type: number
      lng:
        type: number
      location:
        type: string
      picture:
        $ref: '#/definitions/multipart.FileHeader'
    required:
    - content
    - contentPicturePath
    - contentTitle
    - picture
    type: object
  model.DropPatch:
    properties:
      isPinned:
        type: boolean
    type: object
  model.FollowCreationParam:
    properties:
      userId:
        type: integer
    type: object
  model.GroupCreationParam:
    properties:
      '-':
        type: string
      description:
        type: string
      isPrivate:
        type: boolean
      members:
        items:
          type: integer
        type: array
      name:
        type: string
      picture:
        $ref: '#/definitions/multipart.FileHeader'
    required:
    - name
    type: object
  model.GroupMemberCreationParam:
    properties:
      groupId:
        type: integer
      role:
        type: string
    type: object
  model.GroupMemberPatchParam:
    properties:
      role:
        type: string
    type: object
  model.GroupPatchParam:
    properties:
      '-':
        type: string
      description:
        type: string
      isPrivate:
        type: boolean
      name:
        type: string
      picture:
        $ref: '#/definitions/multipart.FileHeader'
    required:
    - name
    type: object
  model.LoginParam:
    properties:
      email:
        type: string
      fcmToken:
        type: string
      password:
        type: string
    type: object
  model.ManageReportRequest:
    properties:
      status:
        type: string
    required:
    - status
    type: object
  model.ReportCreationParam:
    properties:
      commentId:
        type: integer
      commentResponseId:
        type: integer
      description:
        type: string
      dropId:
        type: integer
    required:
    - description
    type: object
  model.ScheduleDropParam:
    properties:
      type:
        type: string
    required:
    - type
    type: object
  model.UserCreationParam:
    properties:
      email:
        type: string
      password:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
  model.UserPatchParam:
    properties:
      '-':
        type: string
      bio:
        type: string
      isPrivate:
        type: boolean
      picture:
        $ref: '#/definitions/multipart.FileHeader'
      username:
        type: string
    type: object
  multipart.FileHeader:
    properties:
      filename:
        type: string
      header:
        $ref: '#/definitions/textproto.MIMEHeader'
      size:
        type: integer
    type: object
  postgres.Comment:
    properties:
      content:
        type: string
      createdAt:
        type: string
      createdBy:
        $ref: '#/definitions/postgres.User'
      createdById:
        type: integer
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      drop:
        $ref: '#/definitions/postgres.Drop'
      dropId:
        type: integer
      id:
        type: integer
      responses:
        items:
          $ref: '#/definitions/postgres.CommentResponse'
        type: array
      updatedAt:
        type: string
    type: object
  postgres.CommentResponse:
    properties:
      comment:
        $ref: '#/definitions/postgres.Comment'
      commentId:
        type: integer
      content:
        type: string
      createdAt:
        type: string
      createdBy:
        $ref: '#/definitions/postgres.User'
      createdById:
        type: integer
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      updatedAt:
        type: string
    type: object
  postgres.Drop:
    properties:
      comments:
        items:
          $ref: '#/definitions/postgres.Comment'
        type: array
      content:
        type: string
      contentPicturePath:
        type: string
      contentSubtitle:
        type: string
      contentTitle:
        type: string
      createdAt:
        type: string
      createdBy:
        $ref: '#/definitions/postgres.User'
      createdById:
        type: integer
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      deletedById:
        type: integer
      description:
        type: string
      dropNotificationID:
        type: integer
      id:
        type: integer
      isPinned:
        type: boolean
      lat:
        type: number
      lng:
        type: number
      location:
        type: string
      picturePath:
        type: string
      status:
        type: integer
      totalLikes:
        type: integer
      type:
        type: string
      updatedAt:
        type: string
    type: object
  postgres.Follow:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      followed:
        $ref: '#/definitions/postgres.User'
      followedID:
        type: integer
      follower:
        $ref: '#/definitions/postgres.User'
      followerID:
        type: integer
      id:
        type: integer
      status:
        type: integer
      updatedAt:
        type: string
    type: object
  postgres.Group:
    properties:
      createdAt:
        type: string
      createdBy:
        $ref: '#/definitions/postgres.User'
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      groupMembers:
        items:
          $ref: '#/definitions/postgres.GroupMember'
        type: array
      id:
        type: integer
      isPrivate:
        type: boolean
      name:
        type: string
      picturePath:
        $ref: '#/definitions/sql.NullString'
      status:
        type: integer
      updatedAt:
        type: string
    type: object
  postgres.GroupMember:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      group:
        $ref: '#/definitions/postgres.Group'
      groupID:
        type: integer
      id:
        type: integer
      member:
        $ref: '#/definitions/postgres.User'
      memberID:
        type: integer
      role:
        type: string
      status:
        type: integer
      updatedAt:
        type: string
    type: object
  postgres.Like:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      drop:
        $ref: '#/definitions/postgres.Drop'
      dropID:
        type: integer
      id:
        type: integer
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/postgres.User'
      userID:
        type: integer
    type: object
  postgres.User:
    properties:
      avatar:
        type: string
      bio:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      fcmtoken:
        type: string
      firebaseUID:
        type: string
      groups:
        items:
          $ref: '#/definitions/postgres.Group'
        type: array
      id:
        type: integer
      isPrivate:
        type: boolean
      password:
        type: string
      role:
        type: string
      status:
        type: integer
      updatedAt:
        type: string
      username:
        type: string
      verifyToken:
        type: string
    type: object
  response_models.GetCommentResponse:
    properties:
      content:
        type: string
      createdAt:
        type: integer
      createdBy: {}
      drop:
        $ref: '#/definitions/response_models.GetDropResponse'
      id:
        type: integer
    type: object
  response_models.GetCommentResponseForDrop:
    properties:
      content:
        type: string
      createdAt:
        type: integer
      createdBy: {}
      id:
        type: integer
      responses:
        items:
          $ref: '#/definitions/response_models.GetCommentResponseResponse'
        type: array
    type: object
  response_models.GetCommentResponseResponse:
    properties:
      content:
        type: string
      createdAt:
        type: integer
      createdBy: {}
      id:
        type: integer
    type: object
  response_models.GetDropNotificationResponse:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      type:
        type: string
    type: object
  response_models.GetDropResponse:
    properties:
      comments:
        items:
          $ref: '#/definitions/response_models.GetCommentResponseForDrop'
        type: array
      content:
        type: string
      contentPicturePath:
        type: string
      contentSubtitle:
        type: string
      contentTitle:
        type: string
      createdAt:
        type: string
      createdBy: {}
      description:
        type: string
      id:
        type: integer
      isCurrentUserLiking:
        type: boolean
      isPinned:
        type: boolean
      lat:
        type: number
      lng:
        type: number
      location:
        type: string
      picturePath:
        type: string
      totalComments:
        type: integer
      totalLikes:
        type: integer
      type:
        type: string
    type: object
  response_models.GetGroupMemberForOneGroupResponse:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      member: {}
      role:
        type: string
      status:
        type: integer
    type: object
  response_models.GetGroupMemberResponse:
    properties:
      createdAt:
        type: string
      group:
        $ref: '#/definitions/response_models.GetGroupResponse'
      id:
        type: integer
      member: {}
      role:
        type: string
      status:
        type: integer
    type: object
  response_models.GetGroupResponse:
    properties:
      createdAt:
        type: string
      createdBy: {}
      description:
        type: string
      groupMembers:
        items:
          $ref: '#/definitions/response_models.GetGroupMemberForOneGroupResponse'
        type: array
      id:
        type: integer
      isPrivate:
        type: boolean
      name:
        type: string
      picturePath:
        $ref: '#/definitions/custom_type.NullString'
    type: object
  response_models.GetOneGroupFeedResponse:
    properties:
      createdAt:
        type: string
      createdBy: {}
      description:
        type: string
      groupDrops:
        items:
          $ref: '#/definitions/response_models.GetDropResponse'
        type: array
      id:
        type: integer
      isPrivate:
        type: boolean
      name:
        type: string
      picturePath:
        $ref: '#/definitions/custom_type.NullString'
    type: object
  response_models.GetOneGroupResponse:
    properties:
      createdAt:
        type: string
      createdBy: {}
      description:
        type: string
      groupMembers:
        items:
          $ref: '#/definitions/response_models.GetGroupMemberForOneGroupResponse'
        type: array
      id:
        type: integer
      isPrivate:
        type: boolean
      name:
        type: string
      picturePath:
        $ref: '#/definitions/custom_type.NullString'
      totalDrops:
        type: integer
    type: object
  response_models.GetReportResponse:
    properties:
      comment:
        $ref: '#/definitions/response_models.GetCommentResponse'
      createdAt:
        type: string
      createdBy: {}
      description:
        type: string
      drop:
        $ref: '#/definitions/response_models.GetDropResponse'
      id:
        type: integer
      response:
        $ref: '#/definitions/response_models.GetCommentResponseResponse'
      status:
        type: integer
    type: object
  response_models.GetSearchGroupResponse:
    properties:
      createdAt:
        type: string
      createdBy: {}
      description:
        type: string
      id:
        type: integer
      isMember:
        type: boolean
      isPrivate:
        type: boolean
      name:
        type: string
      picturePath:
        $ref: '#/definitions/custom_type.NullString'
    type: object
  response_models.GetUserResponse:
    properties:
      avatar:
        type: string
      bio:
        type: string
      createdAt:
        type: string
      id:
        type: integer
      isPrivate:
        type: boolean
      username:
        type: string
    type: object
  sql.NullString:
    properties:
      string:
        type: string
      valid:
        description: Valid is true if String is not NULL
        type: boolean
    type: object
  textproto.MIMEHeader:
    additionalProperties:
      items:
        type: string
      type: array
    type: object
host: localhost:3000
info:
  contact:
    email: stervinou.g36@gmail.com
    name: Droppy API Support
  description: This is the API documentation for Droppy
  title: Droppy API
  version: "1.0"
paths:
  /admin/comments:
    get:
      consumes:
      - application/json
      description: Get all comments by admin user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response_models.GetCommentResponse'
            type: array
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get all comments
      tags:
      - admin
  /admin/comments/{id}:
    delete:
      consumes:
      - application/json
      description: Delete comment by admin user
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Delete comment
      tags:
      - admin
  /admin/drops:
    get:
      consumes:
      - application/json
      description: Get all drops by admin user
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response_models.GetDropResponse'
            type: array
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get all drops
      tags:
      - admin
  /admin/drops/{id}:
    delete:
      consumes:
      - application/json
      description: Delete drop by admin user
      parameters:
      - description: Drop ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Delete drop
      tags:
      - admin
  /admin/drops/count:
    get:
      consumes:
      - application/json
      description: Get all drops count by admin user
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get all drops count
      tags:
      - admin
  /admin/drops/schedule:
    post:
      consumes:
      - application/json
      description: Schedule drop by admin user
      parameters:
      - description: Send drop data
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/model.ScheduleDropParam'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response_models.GetDropNotificationResponse'
        "422":
          description: Invalid drop data
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Schedule drop
      tags:
      - admin
  /admin/drops/send-now:
    post:
      consumes:
      - application/json
      description: Send drop now by admin user
      parameters:
      - description: Send drop data
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/model.ScheduleDropParam'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response_models.GetDropNotificationResponse'
        "422":
          description: Invalid drop data
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Send drop now
      tags:
      - admin
  /admin/groups:
    get:
      consumes:
      - application/json
      description: Get all groups by admin user
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response_models.GetGroupResponse'
            type: array
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get all groups
      tags:
      - admin
  /admin/groups/{id}:
    delete:
      consumes:
      - application/json
      description: Delete group by admin user
      parameters:
      - description: Group ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Delete group
      tags:
      - admin
  /admin/groups/count:
    get:
      consumes:
      - application/json
      description: Get all groups count by admin user
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get all groups count
      tags:
      - admin
  /admin/reports:
    get:
      consumes:
      - application/json
      description: Get all reports by admin user
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get all reports
      tags:
      - admin
  /admin/reports/{id}:
    put:
      consumes:
      - application/json
      description: Manage report by admin user
      parameters:
      - description: Report ID
        in: path
        name: id
        required: true
        type: string
      - description: Manage report data
        in: body
        name: report
        required: true
        schema:
          $ref: '#/definitions/model.ManageReportRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Manage report
      tags:
      - admin
  /admin/users:
    get:
      consumes:
      - application/json
      description: Get all users by admin user
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response_models.GetUserResponse'
            type: array
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - admin
  /admin/users/{id}:
    put:
      consumes:
      - application/json
      description: Update user by admin user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.AdminUpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Update user
      tags:
      - admin
  /admin/users/count:
    get:
      consumes:
      - application/json
      description: Get all users count by admin user
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get all users count
      tags:
      - admin
  /auth:
    post:
      consumes:
      - application/json
      description: login with email and password
      parameters:
      - description: Login object
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/model.LoginParam'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/account.TokenInfo'
        "422":
          description: Invalid email or password
        "500":
          description: Internal Server Error
      summary: Login
      tags:
      - auth
  /auth/oauth_token:
    post:
      consumes:
      - application/json
      description: login with firebase id token
      parameters:
      - description: Firebase ID Token
        in: formData
        name: idToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/account.TokenInfo'
        "422":
          description: Unprocessable Entity
        "500":
          description: Internal Server Error
      summary: Login
      tags:
      - auth
  /auth/refresh:
    get:
      consumes:
      - application/json
      description: get a new jwt token from a refresh token
      parameters:
      - description: Refresh object
        in: body
        name: token
        required: true
        schema:
          $ref: '#/definitions/controllers.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/account.TokenInfo'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Refresh auth token
      tags:
      - auth
  /comments/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a comment
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: "No"
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/errors2.MultiFieldsError'
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Delete a comment
      tags:
      - drop
  /comments/{id}/responses:
    post:
      consumes:
      - application/json
      description: Respond to a comment
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: integer
      - description: Comment creation object
        in: body
        name: response
        required: true
        schema:
          $ref: '#/definitions/model.CommentCreationParam'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response_models.GetCommentResponseResponse'
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/errors2.MultiFieldsError'
      security:
      - BearerAuth: []
      summary: Respond to a comment
      tags:
      - comment response
  /comments/{id}/responses/{responseId}:
    delete:
      consumes:
      - application/json
      description: Delete a comment response
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: integer
      - description: Comment response ID
        in: path
        name: responseId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: ""
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/errors2.MultiFieldsError'
      security:
      - BearerAuth: []
      summary: Delete a comment response
      tags:
      - comment response
  /contents/search:
    get:
      consumes:
      - application/json
      description: Search content for current drop
      parameters:
      - description: Search query
        in: query
        name: search
        required: true
        type: string
      - description: Search query
        in: query
        name: search
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/drop_type_apis.ApiSearchResponse'
            type: array
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Search content for current drop
      tags:
      - drop
  /drops:
    post:
      consumes:
      - application/json
      description: Create a new drop
      parameters:
      - description: Drop object
        in: body
        name: drop
        required: true
        schema:
          $ref: '#/definitions/model.DropCreationParam'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response_models.GetDropResponse'
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
      security:
      - BearerAuth: []
      summary: Create a new drop
      tags:
      - drop
  /drops/:id:
    delete:
      consumes:
      - application/json
      description: Delete a drop
      parameters:
      - description: Drop ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: "No"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Delete a drop
      tags:
      - drop
    patch:
      consumes:
      - application/json
      description: Patch a drop
      parameters:
      - description: Drop ID
        in: path
        name: id
        required: true
        type: integer
      - description: Drop object
        in: body
        name: drop
        required: true
        schema:
          $ref: '#/definitions/model.DropPatch'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response_models.GetDropResponse'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Patch a drop
      tags:
      - drop
  /drops/{id}/comments:
    post:
      consumes:
      - application/json
      description: Comment on a drop
      parameters:
      - description: Drop ID
        in: path
        name: id
        required: true
        type: integer
      - description: Comment creation object
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/model.CommentCreationParam'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response_models.GetCommentResponse'
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/errors2.MultiFieldsError'
      security:
      - BearerAuth: []
      summary: Comment on a drop
      tags:
      - drop
  /drops/{id}/like:
    post:
      consumes:
      - application/json
      description: Like Drop
      parameters:
      - description: Drop ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/postgres.Like'
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/errors2.MultiFieldsError'
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Like Drop
      tags:
      - drop
  /drops/{id}/unlike:
    delete:
      consumes:
      - application/json
      description: Unlike Drop
      parameters:
      - description: Drop ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: "No"
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/errors2.MultiFieldsError'
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Unlike Drop
      tags:
      - drop
  /follows:
    post:
      consumes:
      - application/json
      description: Follow user by its ID
      parameters:
      - description: Follow creation object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.FollowCreationParam'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/postgres.Follow'
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Follow user
      tags:
      - follow
  /follows/{id}:
    delete:
      consumes:
      - application/json
      description: Delete follow
      parameters:
      - description: Follow ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: "No"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "422":
          description: Unprocessable Entity
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Delete follow
      tags:
      - follow
  /follows/accept/{id}:
    post:
      consumes:
      - application/json
      description: Accept request by its ID
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/postgres.Follow'
            type: array
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Accept request
      tags:
      - follow
  /follows/refuse/{id}:
    delete:
      consumes:
      - application/json
      description: Refuse follow request by its ID
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Refuse follow request
      tags:
      - follow
  /groups/:
    post:
      consumes:
      - multipart/form-data
      description: Create group
      parameters:
      - description: Group creation object
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/model.GroupCreationParam'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response_models.GetGroupResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/errors2.MultiFieldsError'
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Create group
      tags:
      - group
  /groups/{id}:
    get:
      consumes:
      - application/json
      description: Get One Group
      parameters:
      - description: Group ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response_models.GetOneGroupResponse'
        "400":
          description: Bad Request
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/errors2.MultiFieldsError'
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get One Group
      tags:
      - group
    patch:
      consumes:
      - application/json
      description: Patch group
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Group patch object
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/model.GroupPatchParam'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response_models.GetGroupResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/errors2.MultiFieldsError'
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Patch group
      tags:
      - group
  /groups/{id}/feed:
    get:
      consumes:
      - application/json
      description: Get Group Feed
      parameters:
      - description: Group ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response_models.GetOneGroupFeedResponse'
        "400":
          description: Bad Request
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/errors2.MultiFieldsError'
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get Group Feed
      tags:
      - group
  /groups/members/{groupId}/{memberId}:
    delete:
      consumes:
      - application/json
      description: Delete Group Member
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/errors2.MultiFieldsError'
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Delete Group Member
      tags:
      - group
    patch:
      consumes:
      - application/json
      description: Patch Group Member
      parameters:
      - description: Group member patch object
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/model.GroupMemberPatchParam'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response_models.GetGroupMemberResponse'
        "400":
          description: Bad Request
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/errors2.MultiFieldsError'
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Patch Group Member
      tags:
      - group
  /groups/members/{id}/{userId}:
    post:
      consumes:
      - application/json
      description: Add User to Group
      parameters:
      - description: Group ID
        in: path
        name: id
        required: true
        type: integer
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response_models.GetGroupMemberResponse'
        "400":
          description: Bad Request
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/errors2.MultiFieldsError'
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Add User to Group
      tags:
      - group
  /groups/members/{id}/join:
    post:
      consumes:
      - application/json
      description: Join Group
      parameters:
      - description: Join group creation object
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/model.GroupMemberCreationParam'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response_models.GetGroupMemberResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/errors2.MultiFieldsError'
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Join Group
      tags:
      - group
  /groups/search:
    get:
      consumes:
      - application/json
      description: Search groups
      parameters:
      - description: Search query
        in: query
        name: search
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response_models.GetSearchGroupResponse'
            type: array
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Search groups
      tags:
      - group
  /reports:
    post:
      consumes:
      - application/json
      description: Create report
      parameters:
      - description: Report object
        in: body
        name: report
        required: true
        schema:
          $ref: '#/definitions/model.ReportCreationParam'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response_models.GetReportResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/errors2.MultiFieldsError'
      security:
      - BearerAuth: []
      summary: Create report
      tags:
      - report
  /users:
    post:
      consumes:
      - application/json
      description: Create user
      parameters:
      - description: User creation object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.UserCreationParam'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response_models.GetUserResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/errors2.MultiFieldsError'
        "500":
          description: Internal Server Error
      summary: Create user
      tags:
      - user
  /users/:id/drops:
    get:
      consumes:
      - application/json
      description: List drops by user ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response_models.GetDropResponse'
            type: array
        "500":
          description: Internal Server Error
      summary: List drops by user ID
      tags:
      - drop
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Get user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response_models.GetUserResponse'
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - user
    patch:
      consumes:
      - application/json
      description: Patch user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User creation object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.UserPatchParam'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/postgres.User'
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Patch user by ID
      tags:
      - user
  /users/{id}/followers:
    get:
      consumes:
      - application/json
      description: Get user followers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items: {}
            type: array
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "422":
          description: Unprocessable Entity
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get user followers
      tags:
      - user
  /users/{id}/following:
    get:
      consumes:
      - application/json
      description: Get user following
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items: {}
            type: array
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "422":
          description: Unprocessable Entity
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get user following
      tags:
      - user
  /users/my-feed:
    get:
      consumes:
      - application/json
      description: Get feed
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/postgres.Drop'
            type: array
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get feed
      tags:
      - drop
  /users/search:
    get:
      consumes:
      - application/json
      description: Search users
      parameters:
      - description: Search query
        in: query
        name: search
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response_models.GetUserResponse'
            type: array
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Search users
      tags:
      - user
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
