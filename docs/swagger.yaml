basePath: /api/v1
definitions:
  account.TokenInfo:
    properties:
      expiry:
        type: integer
      jwttoken:
        type: string
      refreshToken:
        type: string
    type: object
  errors2.MultiFieldsError:
    properties:
      fields:
        additionalProperties:
          type: string
        type: object
    type: object
  go-api_internal_storage_postgres_user.User:
    properties:
      avatar:
        type: string
      bio:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      firstname:
        type: string
      googleID:
        type: string
      id:
        type: integer
      isPrivate:
        type: boolean
      lastname:
        type: string
      phoneNumber:
        type: string
      roles:
        items:
          type: string
        type: array
      status:
        type: integer
      updatedAt:
        type: string
      username:
        type: string
      verifyToken:
        type: string
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  model.UserCreationParam:
    properties:
      email:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      password:
        type: string
      roles:
        items:
          type: string
        type: array
      username:
        type: string
    type: object
host: localhost:3000
info:
  contact:
    email: stervinou.g36@gmail.com
    name: Droppy API Support
  description: This is the API documentation for Droppy
  title: Droppy API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: login with email and password
      parameters:
      - description: Email
        in: formData
        name: email
        required: true
        type: string
      - description: Password
        in: formData
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/account.TokenInfo'
        "422":
          description: Invalid email or password
        "500":
          description: Internal Server Error
      summary: Login
      tags:
      - auth
  /auth/refresh:
    get:
      consumes:
      - application/json
      description: get a new jwt token from a refresh token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/account.TokenInfo'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Refresh auth token
      tags:
      - auth
  /users:
    post:
      consumes:
      - application/json
      description: Create user
      parameters:
      - description: User creation object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.UserCreationParam'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/account.TokenInfo'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/errors2.MultiFieldsError'
        "500":
          description: Internal Server Error
      summary: Create user
      tags:
      - user
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Get user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/go-api_internal_storage_postgres_user.User'
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - user
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
